name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string

env:
  PYTHON_VERSION: 3.9

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}"
        
    - name: Check if prerelease
      id: check-prerelease
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if echo "${VERSION}" | grep -E "(alpha|beta|rc)" > /dev/null; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
          echo "This is a prerelease: ${VERSION}"
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
          echo "This is a stable release: ${VERSION}"
        fi
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if ! echo "${VERSION}" | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$" > /dev/null; then
          echo "Invalid version format: ${VERSION}"
          echo "Expected format: v1.2.3 or v1.2.3-alpha1"
          exit 1
        fi

  test-release:
    name: Test Before Release
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        
    - name: Run full test suite
      run: |
        pytest tests/ --cov=neural_operator_lab --cov-fail-under=80 -m "not slow"
        
    - name: Check package metadata
      run: |
        python setup.py check --metadata --strict
        
    - name: Verify version consistency
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        PACKAGE_VERSION=$(python -c "import neural_operator_lab; print('v' + neural_operator_lab.__version__)")
        if [ "${VERSION}" != "${PACKAGE_VERSION}" ]; then
          echo "Version mismatch: tag=${VERSION}, package=${PACKAGE_VERSION}"
          exit 1
        fi

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build source distribution
      run: |
        python -m build --sdist
        
    - name: Build wheel distribution
      run: |
        python -m build --wheel
        
    - name: Check distributions
      run: |
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Generate checksums
      run: |
        cd dist
        sha256sum * > checksums.txt
        
    - name: Upload checksums
      uses: actions/upload-artifact@v3
      with:
        name: checksums
        path: dist/checksums.txt

  test-package:
    name: Test Package Installation
    runs-on: ${{ matrix.os }}
    needs: build-package
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.9, '3.10', 3.11]
        
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Install from wheel
      run: |
        pip install dist/*.whl
        
    - name: Test import
      run: |
        python -c "import neural_operator_lab; print(neural_operator_lab.__version__)"
        
    - name: Test basic functionality
      run: |
        python -c "
        from neural_operator_lab.models import FourierNeuralOperator
        import torch
        model = FourierNeuralOperator(3, 1, [8, 8], 32)
        x = torch.randn(1, 3, 32, 32)
        y = model(x)
        print(f'Test passed: {y.shape}')
        "

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-package]
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Download checksums
      uses: actions/download-artifact@v3
      with:
        name: checksums
        path: ./
        
    - name: Generate release notes
      id: release-notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Extract version without 'v' prefix for changelog lookup
        VERSION_NUM="${VERSION#v}"
        
        # Generate release notes from CHANGELOG or commit history
        if [ -f CHANGELOG.md ]; then
          # Extract section for this version from CHANGELOG
          sed -n "/## \[${VERSION_NUM}\]/,/## \[/p" CHANGELOG.md | head -n -1 > release_notes.md
        else
          # Generate from commit history since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "## Changes since ${LAST_TAG}" > release_notes.md
            git log --pretty=format:"- %s (%h)" ${LAST_TAG}..HEAD >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "First release of Neural Operator Foundation Lab" >> release_notes.md
          fi
        fi
        
        # Add installation instructions
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "\`\`\`bash" >> release_notes.md
        echo "pip install neural-operator-foundation-lab==${VERSION_NUM}" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        
        # Add checksums
        echo "" >> release_notes.md
        echo "## Checksums" >> release_notes.md
        echo "" >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        cat checksums.txt >> release_notes.md
        echo "\`\`\`" >> release_notes.md
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: Release ${{ needs.validate-release.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
        
    - name: Upload source distribution
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: dist/*.tar.gz
        asset_name: neural-operator-foundation-lab-${{ needs.validate-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload wheel distribution
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: dist/*.whl
        asset_name: neural_operator_foundation_lab-${{ needs.validate-release.outputs.version }}-py3-none-any.whl
        asset_content_type: application/zip
        
    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    environment: pypi
    permissions:
      id-token: write  # For trusted publishing
      
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/
        
    - name: Publish to Test PyPI
      if: needs.validate-release.outputs.is-prerelease == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        
    - name: Publish to PyPI
      if: needs.validate-release.outputs.is-prerelease == 'false'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}

  publish-docker:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    permissions:
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  post-release:
    name: Post-release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, publish-pypi, publish-docker]
    if: always() && needs.create-release.result == 'success'
    
    steps:
    - name: Notify team
      uses: actions/github-script@v6
      with:
        script: |
          const version = '${{ needs.validate-release.outputs.version }}';
          const isPrerelease = '${{ needs.validate-release.outputs.is-prerelease }}' === 'true';
          const releaseType = isPrerelease ? 'Pre-release' : 'Release';
          
          const message = `🚀 ${releaseType} ${version} has been published!
          
          📦 PyPI: https://pypi.org/project/neural-operator-foundation-lab/${version.substring(1)}/
          🐳 Docker: ghcr.io/${{ github.repository }}:${version.substring(1)}
          📋 Release Notes: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${version}
          `;
          
          // Could also send to Slack, Teams, etc.
          console.log(message);
          
    - name: Update development version
      if: needs.validate-release.outputs.is-prerelease == 'false'
      run: |
        # This would typically bump the development version
        # Implementation depends on your versioning strategy
        echo "Would bump development version here"