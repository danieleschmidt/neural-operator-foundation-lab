name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly security scans on Monday at 2 AM UTC
    - cron: '0 2 * * 1'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
        pip install -e .
        
    - name: Run Safety scan
      continue-on-error: true
      run: |
        safety check --json --output safety-report.json
        safety check --short-report
        
    - name: Run pip-audit scan
      continue-on-error: true
      run: |
        pip-audit --format=json --output=pip-audit-report.json
        pip-audit
        
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json

  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] semgrep
        
    - name: Run Bandit scan
      continue-on-error: true
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ -ll
        
    - name: Run Semgrep scan
      continue-on-error: true
      run: |
        semgrep --config=auto src/ --json -o semgrep-report.json
        semgrep --config=auto src/
        
    - name: Upload code scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-scan-results
        path: |
          bandit-report.json
          semgrep-report.json

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for secret scanning
        
    - name: Run TruffleHog scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --json --output=trufflehog-report.json
        
    - name: Upload secret scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: secret-scan-results
        path: trufflehog-report.json

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      matrix:
        language: [ 'python' ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  docker-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t neural-operator-lab:test .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'neural-operator-lab:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install cyclonedx-bom
        
    - name: Generate SBOM
      run: |
        cyclonedx-py -o sbom.json
        cyclonedx-py -o sbom.xml --format xml
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: |
          sbom.json
          sbom.xml

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan, docker-scan, sbom-generation]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "Generated on: $(date)" >> security-summary.md
        echo "" >> security-summary.md
        
        if [ -f dependency-scan-results/safety-report.json ]; then
          echo "## Dependency Vulnerabilities" >> security-summary.md
          echo "Safety scan completed. See artifacts for details." >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        if [ -f code-scan-results/bandit-report.json ]; then
          echo "## Code Security Issues" >> security-summary.md
          echo "Bandit scan completed. See artifacts for details." >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        if [ -f secret-scan-results/trufflehog-report.json ]; then
          echo "## Secret Detection" >> security-summary.md
          echo "TruffleHog scan completed. See artifacts for details." >> security-summary.md
          echo "" >> security-summary.md
        fi
        
        echo "## Recommendations" >> security-summary.md
        echo "1. Review all identified vulnerabilities" >> security-summary.md
        echo "2. Update dependencies with known security issues" >> security-summary.md
        echo "3. Address code security findings" >> security-summary.md
        echo "4. Ensure no secrets are committed to repository" >> security-summary.md
        
        cat security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary
        path: security-summary.md