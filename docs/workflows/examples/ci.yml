name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.9, '3.10', 3.11]
        exclude:
          # Reduce matrix size for efficiency
          - os: macos-latest
            python-version: '3.10'
          - os: windows-latest
            python-version: 3.9
            
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: |
          requirements*.txt
          pyproject.toml
          
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev libopenmpi-dev
        
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install hdf5 open-mpi
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -e ".[dev,test]"
        
    - name: Lint with ruff
      run: |
        ruff check src/ tests/ --output-format=github
        
    - name: Format check with black
      run: |
        black --check --diff src/ tests/
        
    - name: Import sorting check with isort
      run: |
        isort --check-only --diff src/ tests/
        
    - name: Type check with mypy
      run: |
        mypy src/neural_operator_lab/
        
    - name: Security check with bandit
      run: |
        bandit -r src/ -ll
        
    - name: Test with pytest
      env:
        CUDA_VISIBLE_DEVICES: ""  # Force CPU testing for consistency
      run: |
        pytest tests/ \
          --cov=neural_operator_lab \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --junitxml=pytest.xml \
          -m "not gpu and not slow" \
          --durations=10
          
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          coverage.xml
          pytest.xml
          
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short
        
    - name: Run end-to-end tests
      run: |
        pytest tests/end_to_end/ -v --tb=short -m "not slow"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety semgrep
        
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/ # Also show in console
        
    - name: Run Safety dependency scan
      run: |
        safety check --json --output safety-report.json || true
        safety check  # Also show in console
        
    - name: Run Semgrep scan
      run: |
        semgrep --config=auto src/ --json -o semgrep-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, integration-test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        twine check dist/*
        
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/